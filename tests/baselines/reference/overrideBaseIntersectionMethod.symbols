=== tests/cases/compiler/overrideBaseIntersectionMethod.ts ===

// Repro from #14615

type Constructor<T> = new (...args: any[]) => T;
>Constructor : Symbol(Constructor, Decl(overrideBaseIntersectionMethod.ts, 0, 0))
>T : Symbol(T, Decl(overrideBaseIntersectionMethod.ts, 3, 17))
>args : Symbol(args, Decl(overrideBaseIntersectionMethod.ts, 3, 27))
>T : Symbol(T, Decl(overrideBaseIntersectionMethod.ts, 3, 17))

const WithLocation = <T extends Constructor<Point>>(Base: T) => class extends Base {
>WithLocation : Symbol(WithLocation, Decl(overrideBaseIntersectionMethod.ts, 5, 5))
>T : Symbol(T, Decl(overrideBaseIntersectionMethod.ts, 5, 22))
>Constructor : Symbol(Constructor, Decl(overrideBaseIntersectionMethod.ts, 0, 0))
>Point : Symbol(Point, Decl(overrideBaseIntersectionMethod.ts, 10, 1))
>Base : Symbol(Base, Decl(overrideBaseIntersectionMethod.ts, 5, 52))
>T : Symbol(T, Decl(overrideBaseIntersectionMethod.ts, 5, 22))
>Base : Symbol(Base, Decl(overrideBaseIntersectionMethod.ts, 5, 52))

  getLocation(): [number, number] {
>getLocation : Symbol((Anonymous class).getLocation, Decl(overrideBaseIntersectionMethod.ts, 5, 84))

    const [x,y] = super.getLocation();
>x : Symbol(x, Decl(overrideBaseIntersectionMethod.ts, 7, 11))
>y : Symbol(y, Decl(overrideBaseIntersectionMethod.ts, 7, 13))
>super.getLocation : Symbol(Point.getLocation, Decl(overrideBaseIntersectionMethod.ts, 13, 53))
>super : Symbol(Point, Decl(overrideBaseIntersectionMethod.ts, 10, 1))
>getLocation : Symbol(Point.getLocation, Decl(overrideBaseIntersectionMethod.ts, 13, 53))

    return [this.x | x, this.y | y];
>this.x : Symbol(Point.x, Decl(overrideBaseIntersectionMethod.ts, 13, 14))
>this : Symbol((Anonymous class), Decl(overrideBaseIntersectionMethod.ts, 5, 63))
>x : Symbol(Point.x, Decl(overrideBaseIntersectionMethod.ts, 13, 14))
>x : Symbol(x, Decl(overrideBaseIntersectionMethod.ts, 7, 11))
>this.y : Symbol(Point.y, Decl(overrideBaseIntersectionMethod.ts, 13, 31))
>this : Symbol((Anonymous class), Decl(overrideBaseIntersectionMethod.ts, 5, 63))
>y : Symbol(Point.y, Decl(overrideBaseIntersectionMethod.ts, 13, 31))
>y : Symbol(y, Decl(overrideBaseIntersectionMethod.ts, 7, 13))
  }
}

class Point {
>Point : Symbol(Point, Decl(overrideBaseIntersectionMethod.ts, 10, 1))

  constructor(public x: number, public y: number) { }
>x : Symbol(Point.x, Decl(overrideBaseIntersectionMethod.ts, 13, 14))
>y : Symbol(Point.y, Decl(overrideBaseIntersectionMethod.ts, 13, 31))

  getLocation(): [number, number] {
>getLocation : Symbol(Point.getLocation, Decl(overrideBaseIntersectionMethod.ts, 13, 53))

    return [0,0];
  }
}

class Foo extends WithLocation(Point) {
>Foo : Symbol(Foo, Decl(overrideBaseIntersectionMethod.ts, 17, 1))
>WithLocation : Symbol(WithLocation, Decl(overrideBaseIntersectionMethod.ts, 5, 5))
>Point : Symbol(Point, Decl(overrideBaseIntersectionMethod.ts, 10, 1))

  calculate() {
>calculate : Symbol(Foo.calculate, Decl(overrideBaseIntersectionMethod.ts, 19, 39))

    return this.x + this.y;
>this.x : Symbol(Point.x, Decl(overrideBaseIntersectionMethod.ts, 13, 14))
>this : Symbol(Foo, Decl(overrideBaseIntersectionMethod.ts, 17, 1))
>x : Symbol(Point.x, Decl(overrideBaseIntersectionMethod.ts, 13, 14))
>this.y : Symbol(Point.y, Decl(overrideBaseIntersectionMethod.ts, 13, 31))
>this : Symbol(Foo, Decl(overrideBaseIntersectionMethod.ts, 17, 1))
>y : Symbol(Point.y, Decl(overrideBaseIntersectionMethod.ts, 13, 31))
  }
  getLocation() {
>getLocation : Symbol(Foo.getLocation, Decl(overrideBaseIntersectionMethod.ts, 22, 3))

    return super.getLocation()
>super.getLocation : Symbol(getLocation, Decl(overrideBaseIntersectionMethod.ts, 5, 84), Decl(overrideBaseIntersectionMethod.ts, 13, 53))
>getLocation : Symbol(getLocation, Decl(overrideBaseIntersectionMethod.ts, 5, 84), Decl(overrideBaseIntersectionMethod.ts, 13, 53))
  }
  whereAmI() {
>whereAmI : Symbol(Foo.whereAmI, Decl(overrideBaseIntersectionMethod.ts, 25, 3))

    return this.getLocation();
>this.getLocation : Symbol(Foo.getLocation, Decl(overrideBaseIntersectionMethod.ts, 22, 3))
>this : Symbol(Foo, Decl(overrideBaseIntersectionMethod.ts, 17, 1))
>getLocation : Symbol(Foo.getLocation, Decl(overrideBaseIntersectionMethod.ts, 22, 3))
  }
}

